from aiogram import Bot, Dispatcher, executor, types
from config import TOKEN
from keyboards import registerConfrmIk
from database import *
from game.shop import *
from aiogram.dispatcher.filters import Text
from game.shopConfig import CARS


bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot)

dbInit()


async def userExistsCheck(message, userId):
    if not isInDb(userId):
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Å–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ —Å—Ç–∞—Ç—å –∏–≥—Ä–æ–∫–æ–º..")
        return False
    else:
        return True


# handlers
@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    if not isInDb(message.from_user.id):
        await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEHKh5jub0Na7Xhbtdn6IVVMh1KivqXYwACjAADFkJrCkKO_mIXPU3iLQQ")
        await message.answer("üöï –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ –¢–∞–∫—Å–∏!\nüí∞ –í —ç—Ç–æ–π –∏–≥—Ä–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É –ø—Ä–æ—Å—Ç–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ, –ø—Ä–æ–∫–∞—á–∏–≤–∞—è—Å—å! üòÉ")
        await message.answer('–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏:\n1. –í—ã –±—É–¥–µ—Ç–µ –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ —Å —Ü–µ–ª—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n2. –í—ã –æ–±—è–∑—É–µ—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã',
            reply_markup=registerConfrmIk)
    else:
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {getUserStats(message.from_user.id)[1]}! üëã\nüìú –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –Ω–∞ –≤–≤–µ–¥–∏—Ç–µ /help üìú")

@dp.message_handler(commands=['help'])
async def command_help(message: types.Message):
    if not await userExistsCheck(message, message.from_user.id):
        return
    await message.answer("/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìù\n/shop - –∞–≤—Ç–æ—Å–∞–ª–æ–Ω üöô")

@dp.message_handler(commands=['stats'])
async def command_stats(message: types.Message):
    if not await userExistsCheck(message, message.from_user.id):
        return
    data = getUserStats(message.from_user.id)
    currentCarSpd = getCurrentCarSpeed(message.from_user.id)
    await message.answer(f"‚≠êÔ∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ì–†–û–ö–ê ‚≠êÔ∏è\n\nüî∏ –í–∞—à ID: <b>{data[0]}</b> üóùÔ∏è\nüî∏ –í–∞—à –Ω–∏–∫–Ω–µ–π–º: <b>{data[1]}</b> üìï\nüî∏ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{data[2]}‚ÇΩ üí∞</b>\nüî∏ –í–∞—à–∞ –º–∞—à–∏–Ω–∞: <b>{data[3]} ({currentCarSpd} km/h) üöñ</b>", parse_mode="HTML")

@dp.message_handler(commands=['shop'])
async def command_shop(message: types.Message):
    if not await userExistsCheck(message, message.from_user.id):
        return
    await callShop(message, message.from_user, bot)


# callbacks
@dp.callback_query_handler(Text(startswith="registerConfirmIk"))
async def confirmRegisterCallback(callback: types.CallbackQuery):
    if isInDb(callback.from_user.id):
        await callback.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    if callback.data == "registerConfirmIkAgree":
        createUser(callback.from_user.id, callback.from_user.username)
        await callback.answer("–í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏")

        await bot.send_sticker(callback.message.chat.id, "CAACAgIAAxkBAAEHPb1jwcG5Dk_kUPMjU5Zm1CKZuYWNnAACUwADRA3PF6mnqzfswiwJLQQ")
        await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∏–≥—Ä–æ–∫–æ–º!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É! –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ!")
    elif callback.data == "registerConfirmIkRefuse":
        await callback.answer("–í—ã –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏")
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏—Å—å")

# shop
@dp.callback_query_handler(Text(startswith="shopMarkSelected"))
async def selectCarCallback(callback: types.CallbackQuery):
    if callback.data == "shopMarkSelectedEconom":
        await callback.message.answer("–í–æ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —ç–∫–æ–Ω–æ–º –∫–ª–∞—Å—Å–∞ –Ω–∞ –¥–∞–Ω—ã–π –º–æ–º–µ–Ω—Ç")
        await selectCar("econom", bot, callback.from_user)
        await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —ç–∫–æ–Ω–æ–º –∫–ª–∞—Å—Å–∞")
    elif callback.data == "shopMarkSelectedComfort":
        await callback.message.answer("–í–æ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∫–æ–º—Ñ–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –Ω–∞ –¥–∞–Ω—ã–π –º–æ–º–µ–Ω—Ç")
        await selectCar("comfort", bot, callback.from_user)
        await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∫–æ–º—Ñ–æ—Ä—Ç –∫–ª–∞—Å—Å–∞")

@dp.callback_query_handler(Text(startswith="buyCar"))
async def buyCarCallback(callback: types.CallbackQuery):
    for carClass in CARS.items():
        for car in carClass[1]:
            for name, params in car.items():
                price = params[0]
                if callback.data == f"buyCar{name}":
                    if getUserStats(callback.from_user.id)[3] == name or getCurrentCarSpeed(callback.from_user.id) > params[1]:
                        await callback.message.answer("‚ô¶Ô∏è –û–¢–ö–ê–ó–ê–ù–û –í –ü–û–ö–£–ü–ö–ï ‚ô¶Ô∏è\n–ü—Ä–∏—á–∏–Ω–∞: <b>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–µ –∂–µ –∞–≤—Ç–æ –∏–ª–∏ —Ö—É–∂–µ</b>", parse_mode="HTML")
                        await callback.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –ø–æ–∫—É–ø–∫–µ")
                    else:
                        if int(getUserStats(callback.from_user.id)[2]) >= price:
                            payCar(callback.from_user.id, name)
                            await callback.message.answer(f"üí∏ –í–´ –£–°–ü–ï–®–ù–û –ü–†–ï–û–ë–†–ï–õ–ò –ê–í–¢–û–ú–û–ë–ò–õ–¨ üí∏\nüîπ –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã: <b>{name}</b>\nüîπ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: <b>{price}‚ÇΩ</b>", parse_mode="HTML")
                            await callback.answer(f"–í—ã –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å {name}")
                        else:
                            await callback.message.answer("–£–≤—ã, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –∞–≤—Ç–æ...")
                            await callback.answer("–û—Ç–∫–∞–∞–Ω–æ –≤ –ø–æ–∫—É–ø–∫–µ")
                        break


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=False)
